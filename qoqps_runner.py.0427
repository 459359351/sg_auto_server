get_proc_status(pid):
    try:
        p = psutil.Process(pid)
    except:
        return -1
    if (p.status() == "running"):
        return 0
    elif (p.status() == "sleeping"):
        return 1
    return 2



def wait_to_die(pid, interval):
    while get_proc_status(pid) is not -1:
        print("[%s] proc_status: %s" %(get_now_time(), get_proc_status(pid)))
        time.sleep(interval)
        print("abcd")
        print("[%s] sleep_interval: %s" %(get_now_time(), interval))
        if (interval > 10):
            interval = interval/2


def stop_proc(pid):
    os.popen("/bin/kill -9 %d" % pid)
    wait_to_die(pid, 2)
    return 0


def lanch(path, start_script, port, log):
#   lanch(mem_path, 'restart_memdb.sh', -1, tmp)
# rules: start_script must put pid in `PID` file: echo $! > PID
# return a tuple(retcode, pid)

    pid = -1
    asycmd = asycommands.TrAsyCommands(timeout=30)
    asycmd_list.append(asycmd)
    child = subprocess.Popen(['/bin/sh', start_script], shell=False, cwd = path, stderr = subprocess.PIPE)
    #child.wait()
    child.communicate(input=None)
    time.sleep(60)
    print 'child.returncode',child.returncode
    if (child.returncode != 0):
        log.append(child.stderr.read())
        return (-1, pid)
    for iotype, line in asycmd.execute_with_data(['/bin/cat', path + "/PID"], shell=False):
        if (iotype == 1 and line != ""):
            try:
                if (pid == -1):
                    pid = int(line)
                else:
                    tmp = int(line)
                    pid = max(pid, tmp)
            except:
                continue
    if (pid == -1):
        return (-2, pid)
    proc = None
    try:
        proc = psutil.Process(pid)
    except:
        log.append("process %d is not alive" % pid)
        return (-3, pid)
    if (port is -1):
        return (0, pid)
    is_alive = True
    start_time = 0
#    proc_list.append(pid)
    while is_alive:
        try:
            conn_list = proc.connections()
        except:
            is_alive = False
            break
        listened = False
        for conn in conn_list:
            if (conn.status == "LISTEN" or conn.status == "NONE") and conn.laddr[1] == port:
                listened = True
                break
        if listened:
            break
        time.sleep(1)
        start_time += 1
    if not is_alive:
        log.append("process start failed")
#        proc_list.remove(pid)
        return (-3, pid)
    return (start_time, pid)


#test_path /search/odin/daemon/autoCacheQPS/cache_test

def run_performace(path, x):
    cost = []




    ret = performance_once(path, cost)
    if (ret !=0):
        return ret
    set_content_to_x(cost, x)


    return 0


def set_content_to_x(content, x):
    tmp = []
    total_content = ""
    if (type(content) == type(tmp)):
        for line in content:
            total_content += line + '\n'
    elif (type(content) == type(total_content)):
        total_content = content
    sql = "UPDATE %s set %s='%s' where id=%d" % (database_table, x, total_content.decode('gbk').encode('utf8'), mission_id)
    print(sql)
    cursor.execute(sql)
    db.commit()


def performance_once(path, performance_result):
    asycmd = asycommands.TrAsyCommands(timeout=120)
    asycmd_list.append(asycmd)

    # kill lt-queryoptimiz
    for iotype, line in asycmd.execute_with_data(['ps -ef|grep lt-queryoptimiz|grep -v grep'], shell=True):
        print 'line1',line
        if (line.find('lt-queryoptimiz') != -1):
            print 'line',line
            pid = int(line.split()[1])
            print 'pdi',pid
            stop_proc(pid)
    log = []
    # start lt-queryoptimiz
    print("start lt-queryoptimiz")
    (ret, webqo_pid) = lanch(path + "/QueryOptimizer", "start.sh", 8012, log)
    if (ret < 0):
        time.sleep(0.5)
        up_log = ""
        for line in log:
            up_log += "[%s] %s" % (get_now_time(), line + '\n')
        update_errorlog("%s\n" % (up_log))
        for iotype, line in asycmd.execute_with_data(['/bin/tail', '-50', path + "/QueryOptimizer/err.log"], shell=False):
            up_log += line +'\n'
        update_errorlog(up_log.decode('gbk').encode('utf-8').replace("'", "\\'"))
        print(path + "/QueryOptimizer/err.log")
        return -1
    update_errorlog("[%s] webqo Start OK, cost %d s\n" % (get_now_time(), ret))
#    proc_list.append(sh_pid)
#
    # Start PressTool
    log = []
    (ret, tools_pid) = lanch(sggp_path, "start_qo.sh", -1, log)
    print("1_tools_pid: ", tools_pid)
    if (ret < 0):
        time.sleep(0.5)
        up_log = ""
        for line in log:
            up_log += "[%s] %s" % (get_now_time(), line + '\n')
        update_errorlog("%s\n" % (up_log))
        up_log = ""
        for iotype, line in asycmd.execute_with_data(['/bin/tail', '-50', sggp_path + "/err"], shell=False):
            up_log += line + '\n'
        update_errorlog(up_log.decode('gbk').encode('utf-8').replace("'", "\\'"))
        return -1
    update_errorlog("[%s] PressTool Start OK\n" % get_now_time())
#    proc_list.append(tools_pid)
    update_errorlog("[%s] Wait PressTool...\n" % get_now_time())

    # Wait PressTool Stop
    wait_to_die(tools_pid, 5*60)
    print("[%s] 2_tools_pid: %s" %(get_now_time(), tools_pid))
    update_errorlog("[%s] PressTool stoped\n" % get_now_time())
    # Stop cache
    stop_proc(webqo_pid)
    update_errorlog("[%s] Cache stoped\n" % get_now_time())
    # Stop mem
    #os.popen('killall -9 memcached lt-memdb_daemon sggp lt-webcached')

    return get_performance(path + '/QueryOptimizer/err.log', performance_result)

def get_performance(log_file, performance):
    if (os.path.exists(log_file) is False):
        performance.append(log_file + " is not exists")
        return -1

    asycmd = asycommands.TrAsyCommands(timeout=180)
    asycmd_list.append(asycmd)
    for iotype, line in asycmd.execute_with_data(['python', cost_tool, log_file], shell=False):
        performance.append(line)
    if (asycmd.return_code() != 0):
        return asycmd.return_code()
    return 0


def configure_sggp(sggp_conf_file,qps,time):
    if qps == '':
        qps = 1000
    if time == '' or time > 30:
        time = 15

    os.popen("sed -i 's/press_time=.*/press_time=%s/g' %s" %(time, sggp_conf_file))
    os.popen("sed -i 's/press_qps=.*/press_qps=%s/g' %s" %(qps, sggp_conf_file))
    update_errorlog("[%s] configure sggp_conf success\n" % get_now_time())
    
    return 0





def main():
    type_1 = "data"
    type_2 = "conf"
 
    test_path = root_path + test_path_1
    base_path = root_path + base_path_1

    ol_data_path = ol_data_path_1
    ol_conf_path = root_path + ol_conf_path_1

    print("test_path", test_path)
    print("base_path", base_path)

    print("ol_data_path", ol_data_path)
    print("ol_conf_path", ol_conf_path)

    print("mission_id", mission_id)

    (testsvn, basesvn, testitem, newconfip, newconfuser, newconfpassw,newconfpath, newdataip, newdatauser, newdatapassw, newdatapath, newdata_topath,force_update_test_svn, force_update_base_svn, just_run_test, just_run_base, press_qps, press_time) = get_material()
    
    print("testsvn", testsvn)
    print("basesvn", basesvn)
    print("testitem", testitem)
    print("newconfip", newconfip)
    print("newconfuser", newconfuser)
    print("newconfpassw", newconfpassw)
    print("newconfpath", newconfpath)
    print("newdataip", newdataip)
    print("newdatauser", newdatauser)
    print("newdatapassw", newdatapassw)
    print("newdatapath", newdatapath)
    print("newdata_topath",newdata_topath)
    print("force_update_test_svn", force_update_test_svn)
    print("force_update_base_svn", force_update_base_svn)
    print("just_run_test", just_run_test)
    print("just_run_base", just_run_base)

    print("press_qps", press_qps)
    print("press_time", press_qps)

    ####configure sggp/web_qo.ini

    ret_configure_sggp = configure_sggp(sggp_conf,press_qps,press_time)
    if ret_configure_sggp != 0:
        update_errorlog("[%s] %s\n" % (get_now_time(), "configure sggp_conf has some error, pls check"))
        set_status(3)
        return -1
   


    if just_run_test == 1 and just_run_base == 1:
        update_errorlog("[%s] %s\n" % (get_now_time(), "You choise just test and just base at the same time. which one do you want, test or base?"))
        set_status(3)
        return -1
    
#    ret_sync_ol_data = sync_ol_data_to_local(ol_data_path+"/data")
#    if ret_sync_ol_data != 0:
#        update_errorlog("[%s] %s\n" % (get_now_time(), "sync_ol_data_to_local has some error, pls check"))
#        set_status(3)
#        return -1

    ret_sync_olbl_data = sync_olbl_data_to_local(black_data_path)
    if ret_sync_olbl_data != 0:
        update_errorlog("[%s] %s\n" % (get_now_time(), "sync_olbl_data_to_local has some error, pls check"))
        set_status(3)
        return -1

    ret_sync_ol_conf = sync_ol_conf_to_local(ol_conf_path)
    if ret_sync_ol_conf != 0:
        update_errorlog("[%s] %s\n" % (get_now_time(), "sync_ol_conf_to_local has some error, pls check"))
        set_status(3)
        return -1


#### just run test
    if just_run_test == 1 and just_run_base == 0:
        
        update_errorlog("[%s] %s\n" % (get_now_time(), "try start test only"))
        update_errorlog("[%s] %s\n" % (get_now_time(), "start try build test enviroment"))
        ### check code
        try:
            print "testsvn", testsvn
            update_errorlog("[%s] %s\n" % (get_now_time(), "test start try check code"))
            ret = checkcode_env(test_path, testsvn)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "test check code ok"))
                
        ### make
        try:
            update_errorlog("[%s] %s\n" % (get_now_time(), "test start try make"))
            ret = make_env(test_path)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "test make ok"))
        
        
        ### make test data link and scp new data to test env
        try:
            update_errorlog("[%s] %s\n" % (get_now_time(), "test start try to make link with ol_data on test"))
            if newdatapath == '':
                if(os.path.exists(test_path+'/QueryOptimizer/data')):
                    os.popen('rm -rf %s' % (test_path+'/QueryOptimizer/data'))
#                    shutil.rmtree(test_path+'/QueryOptimizer/data')
                os.symlink(ol_data_path+'/data',test_path+'/QueryOptimizer/data')
            else:
                res = maketestlink(ol_data_path,test_path+'/QueryOptimizer',newdatapath)
                if (res != 0):
                    set_status(3)
                    return 4
                if ";" in newdatapath and newdataip!='' and newdatauser!='' and newdatapassw!='':
                    scpres = scpnewdata(test_path+'/QueryOptimizer',newdataip,newdatauser,newdatapassw,newdatapath)
                else:
                    scpres = 1
                    update_errorlog("[%s] %s\n" % (get_now_time(), "test new data configure is wrong"))
                if (scpres != 0):
                    set_status(3)
                    return 4
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1
        update_errorlog("[%s] %s\n" % (get_now_time(), "test start try to make link with ol_data on test ok"))



        ### scp new conf to test env
        try:
            if newconfpath == '': 
                print 'test cfg to here'
                update_errorlog("[%s] %s\n" % (get_now_time(), "test start to cp ol_cfg to test env"))
                ret = cp_new_conf(ol_conf_path,test_path)
            elif newconfip!='' and newconfuser!='' and newconfpassw!='':
                update_errorlog("[%s] %s\n" % (get_now_time(), "test start to scp rd cfg to test env"))
                ret = scp_new_conf(test_path,newconfip,newconfuser,newconfpassw,newconfpath)
            else:
                ret = 1
                update_errorlog("[%s] %s\n" % (get_now_time(), "test new conf configure is wrong"))
        except Exception, e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "test cfg is ok"))
 
        ### cp start.sh to test env
        try:
            update_errorlog("[%s] %s\n" % (get_now_time(), "test start to cp start.sh to test"))
            ret = cp_st_sc(test_path)
        except Exception, e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1
        if (ret != 0):
            set_status(3)
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "test start to cp start.sh to test ok"))       

 
        ### start perform
        if (testitem == 1):#need to run performance
            try:
                ret = run_performace(test_path, "cost_test")
                if (ret != 0):
                    set_status(3)
                    return -1
            except Exception as e:
                update_errorlog("[%s] %s\n" % (get_now_time(), e))
                set_status(3)
                return -1
            if (ret != 0):
                set_status(3)
                return 5
        set_status(4)
        return 0


'''
###### just run base

    if just_run_test == 0 and just_run_base == 1:


        update_errorlog("[%s] %s\n" % (get_now_time(), "try start base only"))
        update_errorlog("[%s] %s\n" % (get_now_time(), "start try build base enviroment"))
        ### check code
        try:
            print "basesvn", basesvn
            update_errorlog("[%s] %s\n" % (get_now_time(), "base start try check code"))
            ret = checkcode_env(base_path, basesvn)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "base check code ok"))
        
        ### make
        try:
            update_errorlog("[%s] %s\n" % (get_now_time(), "base start try make"))
            ret = make_env(base_path)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "base make ok"))
        
        ### rsync ol_data && ol_dev_conf
        try:
            update_errorlog("[%s] %s\n" % (get_now_time(), "base start try cp ol_data and ol_dev_conf"))
            ret = cp_ol_env(ol_data_path, base_path, ol_conf_path)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "base cp ol_data and ol_dev_conf ok"))

        ### rsync press_conf
        try:
            update_errorlog("[%s] %s\n" % (get_now_time(), "base start try cp press_conf"))
            ret = cp_press_conf_env(base_path)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "base cp press_conf ok"))

        ### rsync own_data
        try:
            update_errorlog("[%s] %s\n" % (get_now_time(), "base start try cp own_data"))
            if (newdataip != "" and newdatauser != "" and newdatapassw != "" and newdatapath != ""):
                ret = cp_own_env(base_path, newdataip, newdatauser, newdatapassw, newdatapath, type_1)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            update_errorlog("[%s] %s\n" % (get_now_time(), "base cp own_data error"))
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "base cp own_data ok"))

        ### rsync own_conf
        try:
            update_errorlog("[%s] %s\n" % (get_now_time(), "base start try cp own_conf"))
            if (newconfip != "" and newconfuser != "" and newconfpassw != "" and newconfpath != ""):
                ret = cp_own_env(base_path, newconfip, newconfuser, newconfpassw, newconfpath, type_2)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            update_errorlog("[%s] %s\n" % (get_now_time(), "base cp own_conf error"))
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "base cp own_conf ok"))
        update_errorlog("[%s] %s\n" % (get_now_time(), "base env build ok"))
        
        ### start perform
        if (testitem == 1):#need to run performance
            try:
                ret = run_performace(base_path, "cost_base")
                if (ret != 0):
                    set_status(3)
                    return -1
            except Exception as e:
                update_errorlog("[%s] %s\n" % (get_now_time(), e))
                set_status(3)
                return -1
            if (ret != 0):
                set_status(3)
                return 5
        set_status(4)


##### run test & run base

    if just_run_test == 0 and just_run_base == 0:

        update_errorlog("[%s] %s\n" % (get_now_time(), "try start test and base"))
        update_errorlog("[%s] %s\n" % (get_now_time(), "start try build test enviroment"))
        ### check test code
        try:
            print "testsvn", testsvn
            update_errorlog("[%s] %s\n" % (get_now_time(), "test start try check code"))
            ret = checkcode_env(test_path, testsvn)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "test check code ok"))
        
        ### test make
        try:
            update_errorlog("[%s] %s\n" % (get_now_time(), "test start try make"))
            ret = make_env(test_path)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "test make ok"))
        
        ### test rsync ol_data && ol_dev_conf
        try:
            update_errorlog("[%s] %s\n" % (get_now_time(), "test start try cp ol_data and ol_dev_conf"))
            ret = cp_ol_env(ol_data_path, test_path, ol_conf_path)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "test cp ol_data and ol_dev_conf ok"))

        ### test rsync press_conf
        try:
            update_errorlog("[%s] %s\n" % (get_now_time(), "test start try cp press_conf"))
            ret = cp_press_conf_env(test_path)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "test cp press_conf ok"))

        ### rsync own_data to test
        try:
            update_errorlog("[%s] %s\n" % (get_now_time(), "test start try cp own_data"))
            if (newdataip != "" and newdatauser != "" and newdatapassw != "" and newdatapath != ""):
                ret = cp_own_env(test_path, newdataip, newdatauser, newdatapassw, newdatapath, type_1)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            update_errorlog("[%s] %s\n" % (get_now_time(), "test cp own_data error"))
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "test cp own_data ok"))

        ### rsync own_conf to test
        try:
            update_errorlog("[%s] %s\n" % (get_now_time(), "test start try cp own_conf"))
            if (newconfip != "" and newconfuser != "" and newconfpassw != "" and newconfpath != ""):
                ret = cp_own_env(test_path, newconfip, newconfuser, newconfpassw, newconfpath, type_2)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            update_errorlog("[%s] %s\n" % (get_now_time(), "test cp own_conf error"))
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "test cp own_conf ok"))
        update_errorlog("[%s] %s\n" % (get_now_time(), "test env build ok"))
 



 ######### 
        update_errorlog("[%s] %s\n" % (get_now_time(), "start try build base enviroment"))
        ### check code
        try:
            print "basesvn", basesvn
            update_errorlog("[%s] %s\n" % (get_now_time(), "base start try check code"))
            ret = checkcode_env(base_path, basesvn)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "base check code ok"))
        
        ### make
        try:
            update_errorlog("[%s] %s\n" % (get_now_time(), "base start try make"))
            ret = make_env(base_path)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "base make ok"))
        
        ### rsync ol_data && ol_dev_conf
        try:
            update_errorlog("[%s] %s\n" % (get_now_time(), "base start try cp ol_data and ol_dev_conf"))
            ret = cp_ol_env(ol_data_path, base_path, ol_conf_path)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "base cp ol_data and ol_dev_conf ok"))

        ### rsync press_conf
        try:
            update_errorlog("[%s] %s\n" % (get_now_time(), "base start try cp press_conf"))
            ret = cp_press_conf_env(base_path)
        except Exception as e:
            update_errorlog("[%s] %s\n" % (get_now_time(), e))
            set_status(3)
            return -1

        if (ret != 0):
            set_status(3)
            return 4
        update_errorlog("[%s] %s\n" % (get_now_time(), "base env build ok"))

 ########


        ### start perform
        if (testitem == 1):#need to run performance
            try:
                ret = run_performace(test_path, "cost_test")
                if (ret != 0):
                    set_status(3)
                    return -1
            except Exception as e:
                update_errorlog("[%s] %s\n" % (get_now_time(), e))
                set_status(3)
                return -1
            if (ret != 0):
                set_status(3)
                return 5

            try:
                ret = run_performace(base_path, "cost_base")
                if (ret != 0):
                    set_status(3)
                    return -1
            except Exception as e:
                update_errorlog("[%s] %s\n" % (get_now_time(), e))
                set_status(3)
                return -1
            if (ret != 0):
                set_status(3)
                return 5


        set_status(4)
        return 0

'''

######

def sig_handler(sig, frame):
    update_errorlog("[%s] task %d has been canceled\n" % (get_now_time(), mission_id))
    set_status(5)
    sys.exit()




signal.signal(10, sig_handler)
signal.signal(15, sig_handler)




if __name__ == '__main__':
    print(main())
    #sync_ol_conf_to_local(sys.argv[2])
    #test()
